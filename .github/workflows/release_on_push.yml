name: Release on Push

on:
  push:
    branches: [master]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      VERSION_NAME: ""
      VERSION_CODE: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Download MiniLM ONNX model
        run: |
          mkdir -p mabl/src/main/assets
          curl -L -f -o mabl/src/main/assets/minilm-l6-v2-qint8-arm64.onnx "https://huggingface.co/sentence-transformers/all-MiniLM-L6-v2/resolve/main/onnx/model_qint8_arm64.onnx?download=true"
          curl -L -f -o mabl/src/main/assets/minilm-l6-v2-tokenizer.json "https://huggingface.co/sentence-transformers/all-MiniLM-L6-v2/resolve/main/tokenizer.json?download=true"

      - name: Generate version for build
        run: |
          TODAY=$(date +'%Y-%m-%d')
          TODAY_CODE=$(date +'%Y%m%d')

          # Get all existing releases for today (fetch more to avoid pagination issues)
          EXISTING=$(gh release list --limit 100 --json tagName --jq '.[].tagName' | grep "^${TODAY}\." || echo "")

          if [ -z "$EXISTING" ]; then
            # No releases today, start with .0
            BUILD_NUM=0
          else
            # Find highest build number for today
            BUILD_NUM=$(echo "$EXISTING" | sed "s/^${TODAY}\.//" | sort -n | tail -1)
            BUILD_NUM=$((BUILD_NUM + 1))
          fi

          echo "Existing releases for ${TODAY}: $EXISTING"
          echo "Next build number: $BUILD_NUM"

          VERSION_NAME="${TODAY}.${BUILD_NUM}"
          VERSION_CODE="${TODAY_CODE}${BUILD_NUM}"

          echo "Generated version name: $VERSION_NAME"
          echo "Generated version code: $VERSION_CODE"

          # Set environment variables for subsequent steps
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Release APKs
        uses: nick-fields/retry@v3
        with:
          max_attempts: 5
          # We don't care to time out
          timeout_seconds: 3600
          retry_wait_seconds: 180
          command: ./gradlew assembleRelease :mabl:assembleAipinRelease :mabl:assembleAipinSimulatorRelease -PversionName="$VERSION_NAME" -PversionCode="$VERSION_CODE"

      - name: Rename APK files
        run: |
          # Create release artifacts directory
          mkdir -p release-artifacts

          # Rename main app APKs
          cp mabl/build/outputs/apk/aipin/release/mabl-aipin-release.apk "release-artifacts/PenumbraOS-MABL-AiPin-${VERSION_NAME}.apk"
          cp mabl/build/outputs/apk/aipinSimulator/release/mabl-aipinSimulator-release.apk "release-artifacts/PenumbraOS-MABL-AiPin-Simulator-${VERSION_NAME}.apk"
          # cp mabl/build/outputs/apk/android/release/mabl-android-release.apk "release-artifacts/PenumbraOS-MABL-Android-${VERSION_NAME}.apk"

          # Rename plugin APKs
          cp plugins/demo/build/outputs/apk/release/demo-release.apk "release-artifacts/PenumbraOS-Plugin-Demo-${VERSION_NAME}.apk"
          cp plugins/openai/build/outputs/apk/release/openai-release.apk "release-artifacts/PenumbraOS-Plugin-OpenAI-${VERSION_NAME}.apk"
          cp plugins/aipinsystem/build/outputs/apk/release/aipinsystem-release.apk "release-artifacts/PenumbraOS-Plugin-AiPin-System-${VERSION_NAME}.apk"
          cp plugins/system/build/outputs/apk/release/system-release.apk "release-artifacts/PenumbraOS-Plugin-Generic-System-${VERSION_NAME}.apk"
          cp plugins/googlesearch/build/outputs/apk/release/googlesearch-release.apk "release-artifacts/PenumbraOS-Plugin-GoogleSearch-${VERSION_NAME}.apk"

      - name: Create Prerelease
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION_NAME }}
          name: Alpha ${{ env.VERSION_NAME }}
          prerelease: true
          generate_release_notes: true
          files: release-artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
